## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
str(creditApp)
App<- creditApp[,-c(1,3)]  ## removing column 1 as its nt required
summary(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=100,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("response"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
## Confusion matrix
prob<- predict(logisR,type = c("binomial"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
str(creditApp)
App<- creditApp[,-c(1,3,8,9,10)]  ## removing column 1 as its nt required
View(App)
summary(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=100,data = App )
summary(logisR)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=2000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("binomial"), App)
prob
## Confusion matrix
prob<- predict(logisR,type = c("response"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
## Confusion matrix
prob<- predict(logisR,type = c("link"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
View(creditApp)
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
summary(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=2000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("link"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
View(creditApp)
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
summary(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=2000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("class"), App)
prob
## Confusion matrix
prob<- predict(logisR,type = c("terms"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
summary(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=2000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("terms"), App)
prob
confusion<- table(prob>=0.5, App$card)
confusion<- table(prob>0.5, App$card)
View(logisR)
View(logisR)
View(prob)
View(prob)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
View(creditApp)
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
summary(App)
str(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=2000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("terms"), App)
prob
confusion<- table(prob>0.5, App$card)
confus<- table(prob>0.5, App$card)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
View(App)
summary(App)
str(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=100,data = App )
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=1000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("terms"), App)
prob
confus<- table(prob>0.5, App$card)
## Confusion matrix
prob<- predict(logisR,type = c("link"), App)
prob
confus<- table(prob>0.5, App$card)
confusion
confus
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
confusion<- table(prob>0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
View(creditApp)
str(creditApp)
App<- creditApp[,-c(1,3)]  ## removing column 1 as its nt required
summary(App)
str(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=1000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("link"), App)
prob
confusion<- table(prob>0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 87 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##****************************************************************************
## 2.Classify whether application accepted or not using Logistic regression
creditApp<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\creditcard.csv")
View(creditApp)
str(creditApp)
App<- creditApp[,-c(1)]  ## removing column 1 as its nt required
View(App)
summary(App)
str(App)
## Building the regression model
logisR<- glm(card~., family= "binomial",maxit=1000,data = App )
summary(logisR)
## Confusion matrix
prob<- predict(logisR,type = c("link"), App)
prob
confusion<- table(prob>0.5, App$card)
confusion
# Accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## model shows 98 % accuracy
pred_values=NULL
yes_no= NULL
for (i in 1:1319)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
App[,"probabilities"]= prob
App[,"predicted_Values"]= pred_values
App[,"yes_no"]= yes_no
## ROC curve
library(ROCR)
rocpred<- prediction(prob,App$card)
rocperf<- performance(rocpred,'tpr','fpr')
plot(rocperf, colorize=T)
##Split the data into train and test
library(caTools)
set.seed(101)
sample<-sample.split(Bank_Data,SplitRatio = 0.75)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
View(Bank_Data)
str(Bank_Data)
##Split the data into train and test
library(caTools)
set.seed(101)
sample<-sample.split(Bank_Data,SplitRatio = 0.75)
train<-subset(Bank_Data, sample= TRUE)
test<- subset(Bank_Data, sample= FALSE)
##Split the data into train and test
library(caTools)
set.seed(101)
sample<-sample.split(Bank_Data,SplitRatio = 0.75)
train<-subset(data, sample= TRUE)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
View(Bank_Data)
str(Bank_Data)
summary(Bank_Data)
##Split the data into train and test
library(caTools)
set.seed(101)
sample<-sample.split(Bank_Data$age,SplitRatio = 0.75)
train<-subset(data, sample= TRUE)
train<-subset(Bank_Data, sample= TRUE)
test<- subset(Bank_Data, sample= FALSE)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
str(Bank_Data)
summary(Bank_Data)
##Split the data into train and test
library(caTools)
set.seed(101)
sample<-sample.split(Bank_Data$age,SplitRatio = 0.75)
train<-subset(Bank_Data, sample= TRUE)
sample<- sample.split(Bank_Data$age, SplitRatio = 0.75)
train<-subset(Bank_Data, sample= TRUE)
test<- subset(Bank_Data, sample= FALSE)
train<-subset(Bank_Data, sample== TRUE)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
View(Bank_Data)
##Split the data into train and test for better accuracy
library(caTools)
set.seed(101)
sample<- sample.split(Bank_Data$age, SplitRatio = 0.75)
train<-subset(Bank_Data, sample== TRUE)
test<- subset(Bank_Data, sample== FALSE)
## Builing the logistic model train data
logistic<-glm(y~., family= "binomial",data = train)
summary(logistic)
## Builing the logistic model train data
logistic<-glm(y~., family= "binomial",data = test)
summary(logistic)
prob= predict(logistic, type = c("response"), train)
prob
prob= predict(logistic, type = c("response"), test)
prob
confusion<- table(prob>0.5, train$y)
confusion
prob= predict(logistic, type = c("response"), train)
prob
prob= predict(logistic, type = c("response"), test)
prob
confusion<- table(prob>0.5, train$y)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
str(Bank_Data)
summary(Bank_Data)
##Split the data into train and test for better accuracy
library(caTools)
set.seed(101)
sample<- sample.split(Bank_Data$age, SplitRatio = 0.75)
train<-subset(Bank_Data, sample== TRUE)
test<- subset(Bank_Data, sample== FALSE)
## Builing the logistic model train & test data
logisticTrain<-glm(y~., family= "binomial",data = train)
summary(logistic)
summary(logisticTrain)
## Builing the logistic model train data
logisticTest<-glm(y~., family= "binomial",data = test)
summary(logisticTest)
prob= predict(logisticTrain, type = c("response"), train)
prob
prob= predict(logisticTest, type = c("response"), test)
prob
probTrain= predict(logisticTrain, type = c("response"), train)
probTrain
probTest= predict(logisticTest, type = c("response"), test)
probTest
confusion<- table(probTrain>0.5, train$y)
confusion
confusion<- table(probTest>0.5, test$y)
confusion
## Checking the model accuracy of Train and test
AccuracyTest<- sum(diag(confusionTrain))/sum(confusionTrain)
confusionTrain<- table(probTrain>0.5, train$y)
confusionTrain
confusionTest<- table(probTest>0.5, test$y)
confusionTest
## Checking the model accuracy of Train and test
AccuracyTest<- sum(diag(confusionTrain))/sum(confusionTrain)
AccuracyTest  ## This shows my model has 90 % chance of correct prediction on y.
AccuracyTest<- sum(diag(confusionTrain))/sum(confusionTrain)
## Checking the model accuracy of Train and test
AccuracyTrain<- sum(diag(confusionTrain))/sum(confusionTrain)
AccuracyTrain
AccuracyTest<- sum(diag(confusionTest))/sum(confusionTest)
AccuracyTest  ## This shows my model has 90 % chance of correct prediction on y.
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
str(Bank_Data)
summary(Bank_Data)
##Split the data into train and test data to test the regression model
library(caTools)
set.seed(101)
sample<- sample.split(Bank_Data$age, SplitRatio = 0.75)
train<-subset(Bank_Data, sample== TRUE)
test<- subset(Bank_Data, sample== FALSE)
## Builing the logistic model
logistic<-glm(y~., family= "binomial",data = Bank_Data)
summary(logistic)
prob= predict(logistic, type = c("response"), Bank_Data)
prob
confusion<- table(prob>0.5, Bank_Data$y)
confusion
## Checking the model accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## This shows my model has 90 % chance of correct prediction on y.
pred_values=NULL
yes_no= NULL
for (i in 1:45211)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
Bank_Data[,"probabilities"]= prob
Bank_Data[,"predicted_Values"]= pred_values
Bank_Data[,"yes_no"]= yes_no
## Checking the ROC curve
library(ROCR)
?prediction
rocrpred<- prediction(prob,Bank_Data$y)
rocrperf<- performance(rocrpred,'tpr','fpr')
rocrperf
plot(rocrperf,colorize=T)
## Builing the logistic model
logistic<-glm(y~., family= "binomial",data = train)
##1Whether the client has subscribed a term deposit or not Binomial ("yes" or "no")
Bank_Data<- read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Logistic_Regression\\bank-full.csv")
str(Bank_Data)
summary(Bank_Data)
##Split the data into train and test data to test the regression model
library(caTools)
set.seed(101)
sample<- sample.split(Bank_Data$age, SplitRatio = 0.75)
train<-subset(Bank_Data, sample== TRUE)
test<- subset(Bank_Data, sample== FALSE)
## Builing the logistic model
logistic<-glm(y~., family= "binomial",data = train)
summary(logistic)
prob= predict(logistic, type = c("response"), test)
prob
confusion<- table(prob>0.5, test$y)
confusion
## Checking the model accuracy
Accuracy<- sum(diag(confusion))/sum(confusion)
Accuracy  ## This shows my model has 90 % chance of correct prediction on y.
pred_values=NULL
yes_no= NULL
for (i in 1:45211)
{
pred_values= ifelse(prob[i]>=0.5,1,0)
yes_no= ifelse(prob[i]>=0.5,"yes","no")
}
test[,"probabilities"]= prob
test[,"predicted_Values"]= pred_values
test[,"yes_no"]= yes_no
## Checking the ROC curve
library(ROCR)
rocrpred<- prediction(prob,test$y)
rocrperf<- performance(rocrpred,'tpr','fpr')
plot(rocrperf,colorize=T)
