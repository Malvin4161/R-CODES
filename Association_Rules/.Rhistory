attach(groceries)
plot(citrus.fruit, ready.soups)
ruleGro<- apriori(books)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.2, conf= 0.5), appearance = list(rhs="margarine="))
margarine=coffee
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.2, conf= 0.5), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.2, conf= 0.5), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5))
arules::inspect(ruleGro2)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.2, conf= 0.5), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1) # has a higher lift ration with semi finished bread and ready sups
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.2, conf= 0.5), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1) # has a higher lift ration with semi finished bread and ready sups
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5))
arules::inspect(ruleGro2)## Total rule count forthis condition 8217
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3)
View(ruleGro3)
View(ruleGro3)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count for this condition 8217
ruleGro2<- apriori(groceries, parameter = list(minlen = 2, supp= 0.4, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count for this condition 8217
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count for this condition 8217
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.5, conf= 0.7))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.5, conf= 0.6))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.5, conf= 0.5))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.5, conf= 0.3))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.5, conf= 0.4))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 1, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 0 rows for 3 items together
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0, engine='interactive')
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
plot(ruleGro2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 0 rows for 3 items together with 3485 count,
plot(ruleGro3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
plot(ruleGro, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
plot(ruleGro, method = NULL, measure = "support", shading = "lift")
plot(ruleGro,  measure = "support", shading = "lift")
plot(ruleGro, method = NULL, measure = "support", shading = "lift")
plot(ruleGro, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted)
plot(ruleGro, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.01, conf= 0.02), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1) # has a higher lift ratio with semi finished bread and ready sups
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.05, conf= 0.2), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1) # has a higher lift ratio with semi finished bread and ready sups
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
## 1 book dataset
getwd()
setwd("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules")
books<-read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules\\book.csv")
View(books)
str(books)
#EDA
books$ChildBks<- as.factor(books$ChildBks)
books$YouthBks<- as.factor(books$YouthBks)
books$CookBks<- as.factor(books$CookBks)
books$DoItYBks<- as.factor(books$DoItYBks)
books$RefBks<- as.factor(books$RefBks)
books$ArtBks<- as.factor(books$ArtBks)
books$GeogBks<- as.factor(books$GeogBks)
books$ItalCook<- as.factor(books$ItalCook)
books$ItalAtlas<- as.factor(books$ItalAtlas)
books$ItalArt<- as.factor(books$ItalArt)
books$Florence<- as.factor(books$Florence)
View(books)
str(books)
summary(books)
rule= apriori(books)
arules::inspect(rule)
rule.sorted<- sort(rule, by= "lift")
arules::inspect(rule.sorted)
## Intall arulesviz library for plot vizualisation
#install.packages("arulesViz")
library(arulesViz)
plot(rule, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 1,supp = 0.2,conf = 0.5)
,appearance = list(rhs = "ItalAtlas=0"))
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
attach(groceries)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(minlen = 2, supp= 0.05, conf= 0.2), appearance = list(rhs="margarine="))
arules::inspect(ruleGro1) # has a higher lift ratio with semi finished bread and ready sups
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count for this condition
plot(ruleGro2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 0 rows for 3 items together with 3485 count,
plot(ruleGro3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
plot(ruleGro3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
class(groceries)
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(supp= 0.01, conf= 0.5))
arules::inspect(ruleGro1) # 3 rules, has a higher lift ratio with semi finished bread and ready sups
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.4, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count 1 for this condition
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.3, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count 1 for this condition
## 1 book dataset
getwd()
setwd("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules")
books<-read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules\\book.csv")
View(books)
str(books)
#EDA
books$ChildBks<- as.factor(books$ChildBks)
books$YouthBks<- as.factor(books$YouthBks)
books$CookBks<- as.factor(books$CookBks)
books$DoItYBks<- as.factor(books$DoItYBks)
books$RefBks<- as.factor(books$RefBks)
books$ArtBks<- as.factor(books$ArtBks)
books$GeogBks<- as.factor(books$GeogBks)
books$ItalCook<- as.factor(books$ItalCook)
books$ItalAtlas<- as.factor(books$ItalAtlas)
books$ItalArt<- as.factor(books$ItalArt)
books$Florence<- as.factor(books$Florence)
View(books)
summary(books)
rule= apriori(books)
arules::inspect(rule)
arules::inspect(rule.sorted, 3)
arules::inspect(head(rule.sorted), 3)
rule= apriori(books)
arules::inspect(rule)
rule.sorted<- sort(rule, by= "lift")
arules::inspect(head(rule.sorted), 3)
rule= apriori(books)
arules::inspect(rule)
inspect(head(sort(rule, by = "lift"), 3))
## Intall arulesviz library for plot vizualisation
#install.packages("arulesViz")
library(arulesViz)
plot(rule, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 1,supp = 0.2,conf = 0.5)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 1,supp = 0.5,conf = 0.5)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 1,supp = 0.5,conf = 0.8)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 2,supp = 0.5,conf = 0.8)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 3,supp = 0.5,conf = 0.8)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 3,supp = 0.5,conf = 1)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering ItalAtlas=0 number of rules = 1112
plot(rule1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
rule2 = apriori(books,parameter = list(minlen = 1,supp = 0.3,conf = 0.6)
,appearance = list(rhs = "ItalCook=0"))
arules::inspect(rule2) ## When considering italCook=0 number of rules = 865
arules::inspect(rule2) ## When considering rhs italCook=0 number of rules = 865
plot(rule2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
inspect(frequentItems)
itemFrequencyPlot(groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
itemFrequencyPlot(groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
itemFrequencyPlot(ruleGro3, topN=10, type="absolute", main="Item Frequency") # plot frequent items
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 3rules  items together with 3485 count,
itemFrequencyPlot(ruleGro3, topN=10, type="absolute", main="Item Frequency") # plot frequent items
itemFrequencyPlot(groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
itemFrequencyPlot(groceries, topN=10, main="Item Frequency") # plot frequent items
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
inspect(frequentItems)
itemFrequencyPlot(groceries, topN=10, main="Item Frequency") # plot frequent items
?itemFrequencyPlot
itemFrequencyPlot(arules, topN=10, main="Item Frequency") # plot frequent items
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(supp= 0.01, conf= 0.5))
arules::inspect(ruleGro1) # 96 rules
itemFrequencyPlot(arules, topN=10, main="Item Frequency") # plot frequent items
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(supp= 0.01, conf= 0.5))
arules::inspect(ruleGro1) # 96 rules
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
itemFrequencyPlot(arules, topN=10, main="Item Frequency") # plot frequent items
itemFrequencyPlot(item(ruleGro1), topN=10, main="Item Frequency") # plot frequent items
itemFrequencyPlot(groceries, topN=10, main="Item Frequency") # plot frequent items
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
inspect(frequentItems)
itemFrequencyPlot(Groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
itemFrequencyPlot(groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
inspect(frequentItems)
itemFrequencyPlot(groceries, topN=10, type="absolute", main="Item Frequency") # plot frequent items
?itemFrequencyPlot
itemFrequencyPlot(groceries, topN=10, type="relative", main="Item Frequency") # plot frequent items
## 1 book dataset
getwd()
setwd("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules")
books<-read.csv("F:\\Study\\DATA_SCIENCE\\Assignment_Mtrl\\Association_Rules\\book.csv")
View(books)
str(books)
#EDA
books$ChildBks<- as.factor(books$ChildBks)
books$YouthBks<- as.factor(books$YouthBks)
books$CookBks<- as.factor(books$CookBks)
books$DoItYBks<- as.factor(books$DoItYBks)
books$RefBks<- as.factor(books$RefBks)
books$ArtBks<- as.factor(books$ArtBks)
books$GeogBks<- as.factor(books$GeogBks)
books$ItalCook<- as.factor(books$ItalCook)
books$ItalAtlas<- as.factor(books$ItalAtlas)
books$ItalArt<- as.factor(books$ItalArt)
books$Florence<- as.factor(books$Florence)
View(books)
str(books)
summary(books)
rule= apriori(books)
arules::inspect(rule)
inspect(head(sort(rule, by = "lift"), 3))  ## top 3 sorted by confidence
## Intall arulesviz library for plot vizualisation
#install.packages("arulesViz")
library(arulesViz)
plot(rule, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
#creating rules with different support , min length confidence values
rule1 = apriori(books,parameter = list(minlen = 3,supp = 0.5,conf = 1)
,appearance = list(rhs = "ItalAtlas=0"))
arules::inspect(rule1)  ## When considering as rhs ItalAtlas=0,  number of rules = 65 which will lead to ItalAtlas
plot(rule1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
rule2 = apriori(books,parameter = list(minlen = 1,supp = 0.3,conf = 0.6)
,appearance = list(rhs = "ItalCook=0"))
arules::inspect(rule2) ## When considering rhs italCook=0 number of rules = 865
plot(rule2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
rule3 = apriori(books,parameter = list(minlen = 2,supp = 0.3,conf = 0.6))
arules::inspect(rule3)  ## Considering min length of books in rules = 2 number of rules = 8817
plot(rule3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
rule4= apriori(books,parameter = list(minlen = 4,supp = 0.5,conf = 0.9))
rule4= apriori(books,parameter = list(minlen = 4,supp = 0.5,conf = 0.9))
arules::inspect(rule4)
plot(rule4, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0, engine='interactive')
rule3 = apriori(books,parameter = list(minlen = 2,supp = 0.3,conf = 0.6)
, appearance = list(rhs = "ItalCook=0"))
arules::inspect(rule3)  ## Considering min length of books in rules = 2 number of rules = 8817
plot(rule3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL)
rule4= apriori(books,parameter = list(minlen = 4,supp = 0.5,conf = 0.9))
arules::inspect(rule4)
plot(rule4, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0, engine='interactive')
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
inspect(frequentItems)
itemFrequencyPlot(groceries, topN=10, type="relative", main="Item Frequency") # plot frequent items
?itemFrequencyPlot
itemFrequencyPlot(groceries) # plot frequent items
itemFrequencyPlot(groceries$citrus.fruit) # plot frequent items
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
## applyig the apriori function
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
itemFrequencyPlot(items(ruleGro)) # plot frequent items
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(supp= 0.01, conf= 0.5))
arules::inspect(ruleGro1) # 96 rules
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.3, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count 1 for this condition
plot(ruleGro2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4))
arules::inspect(ruleGro3) ## 3rules  items together with 3485 count,
plot(ruleGro3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
itemFrequencyPlot(items(ruleGro3), ) # plot frequent items
itemFrequencyPlot(items(groceries), ) # plot frequent items
## less support values show how less a product is used in comparision with other products
frequentItems<- eclat(groceries, parameter = list(supp= 0.07,maxlen= 15))
##showing the most frequent itemspurchased
inspect(frequentItems)
itemFrequencyPlot(items(frequentItems), ) # plot frequent items
itemFrequencyPlot(groceries,topN=20,type="absolute")
data(groceries)
itemFrequencyPlot(groceries,topN=20,type="absolute")
itemFrequencyPlot(groceries,topN=10,type="absolute")
groceries<- data.matrix(groceries)
itemFrequencyPlot(groceries,topN=10,type="absolute")
## applyig the apriori function
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
plot(ruleGro,method="graph",interactive=TRUE,shading=NA)
plot(ruleGro,method="graph",interactive=TRUE,shading=NA, engine='interactive')
plot(ruleGro, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4), appearance = list(lhs="ready.soups="))
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
data(groceries)
groceries<- data.matrix(groceries)
## applyig the apriori function
ruleGro<- apriori(groceries)
summary(groceries)
## applyig the apriori function
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
plot(ruleGro, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
## CReating different rules with support and confidence changes
ruleGro1<- apriori(groceries, parameter = list(supp= 0.01, conf= 0.5))
arules::inspect(ruleGro1) # 96 rules
plot(ruleGro1, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro2<- apriori(groceries, parameter = list(minlen = 1, supp= 0.3, conf= 0.5), appearance = list(rhs="ready.soups="))
arules::inspect(ruleGro2)## Total rule count 1 for rules which leads to buy ready.soups
plot(ruleGro2, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
ruleGro3<- apriori(groceries, parameter = list(minlen = 3, supp= 0.2, conf= 0.4), appearance = list(lhs="ready.soups="))
arules::inspect(ruleGro3) ## 3rules  items together with 3485 count,
plot(ruleGro3, method = NULL, measure = "support", shading = "lift",
interactive = FALSE, data = NULL, control = NULL, jitter = 0)
#3 my_movies dataset
movies<- read.csv("my_movies.csv")
View(movies)
plot(ruleGro,method="graph",interactive=TRUE,shading=NA, engine='interactive')
## Groceries dataset
groceries<- read.csv("groceries.csv")
View(groceries)
str(groceries)
class(groceries)
attach(groceries)
data(groceries)
summary(groceries)
## applyig the apriori function
ruleGro<- apriori(groceries)
arules::inspect(ruleGro)
ruleGro.Sorted<- sort(ruleGro, by="lift")
arules::inspect(ruleGro.Sorted) # Giving 5 rules
plot(ruleGro,method="graph",interactive=TRUE,shading=NA, engine='interactive')
#3 my_movies dataset
movies<- read.csv("my_movies.csv")
#3 my_movies dataset
movies<- read.csv("my_movies.csv")
View(movies)
str(movies)
movieRule<- apriori(as.matrix(movies[,6:15]),parameter = list(minlen = 1,supp = 0.2,conf = 0.5))
arules::inspect(movieRule)
plot(moviesRule,method= "graph",interactive=TRUE,shading=NA, engine='interactive')
plot(movieRule,method= "graph",interactive=TRUE,shading=NA, engine='interactive')
movieRule1<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen = 1, supp = 0.2, conf= 0.5),
appearance = list(rhs="Harry.Potter2"))
arules::inspect(movieRule1)
movieRule1<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen = 2, supp = 0.2, conf= 0.5),
appearance = list(rhs="Harry.Potter2"))
arules::inspect(movieRule1)
movieRule1<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen = 2, supp = 0.2, conf= 0.5),
appearance = list(rhs="Braveheart"))
arules::inspect(movieRule1)
movieRule1<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen = 2, supp = 0.2, conf= 0.5),
appearance = list(rhs="Braveheart"))
arules::inspect(movieRule1)
movieRule<- apriori(as.matrix(movies[,6:15]),parameter = list(minlen = 1,supp = 0.2,conf = 0.5))
arules::inspect(movieRule)  ## Gives 15 rules
movieRule1<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen = 1, supp = 0.2, conf= 0.5),
appearance = list(rhs="Patriot"))
arules::inspect(movieRule1)
plot(movieRule1, method = "graph", interactive = TRUE, shading = NA, engine = 'interactive')
plot(movieRule1, method = "graph", interactive = TRUE, shading = NA, engine = 'interactive')
plot(movieRule1, method = "graph", interactive = TRUE, shading = NA, engine = 'interactive')
movieRule2<- apriori(as.matrix(movies[,6:15], parameter = list(minlen= 2, supp = 0.5, conf=0.8), appearance = list(rhs="Gladiator")))
arules::inspect(movieRule2)
movieRule2<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen= 2, supp = 0.5, conf=0.8),
appearance = list(rhs="Gladiator"))
arules::inspect(movieRule2)
plot(movieRule2, method = "graph", interactive = TRUE, shading = NA, engine = 'interactive' )
movieRule2<- apriori(as.matrix(movies[,6:15]), parameter = list(minlen= 2, supp = 0.5, conf=0.8),
appearance = list(rhs="Gladiator"))
arules::inspect(movieRule2)
#Installing and loading the libraries
install.packages("recommenderlab", dependencies=TRUE)
install.packages("Matrix")
